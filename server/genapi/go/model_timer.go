/*
 * Distributed Durable Timer Service API
 *
 * A distributed, durable timer service that can schedule and execute HTTP webhook callbacks  at specified times with high reliability and scalability.  ## Features - Create one-time timers with custom payloads - Durable persistence across service restarts - At-least-once delivery semantics - Configurable retry policies and timeouts - Timer modification and cancellation - Callback response can update timer schedule - Namespace-based timer uniqueness
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package genapi

import (
	"time"
)

type Timer struct {

	// Unique identifier for the timer within the namespace
	Id string `json:"id"`

	// Namespace identifier for the timer. It is used for scalability and timer ID uniqueness.
	Namespace string `json:"namespace"`

	// When the timer is scheduled to execute
	ExecuteAt time.Time `json:"executeAt"`

	// HTTP URL to call when executing, returning 200 with CallbackResponse means success, otherwise will be retried.
	CallbackUrl string `json:"callbackUrl"`

	// Custom payload data
	Payload map[string]interface{} `json:"payload,omitempty"`

	RetryPolicy RetryPolicy `json:"retryPolicy,omitempty"`

	// Timeout for the HTTP callback in seconds
	CallbackTimeoutSeconds int32 `json:"callbackTimeoutSeconds,omitempty"`

	// When the timer was created
	CreatedAt time.Time `json:"createdAt"`

	// When the timer was last updated
	UpdatedAt time.Time `json:"updatedAt"`

	// When the timer was executed (if applicable)
	ExecutedAt time.Time `json:"executedAt,omitempty"`
}
