/*
 * Distributed Durable Timer Service API
 *
 * A distributed, durable timer service that can schedule and execute HTTP webhook callbacks  at specified times with high reliability and scalability.  ## Features - Create one-time timers with custom payloads - Durable persistence across service restarts - At-least-once delivery semantics - Configurable retry policies and timeouts - Timer modification and cancellation - Callback response can update timer schedule - Namespace-based timer uniqueness
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package genapi

import (
	"time"
)

type CreateTimerRequest struct {

	// Namespace identifier for the timer. It is for timer ID uniqueness. Also used for scalability design(tied to the number of shards). Must be one of the namespaces configured in the system.
	Namespace string `json:"namespace"`

	// Unique identifier for the timer within the namespace (used for deduplication)
	Id string `json:"id"`

	// ISO 8601 timestamp when the timer should execute
	ExecuteAt time.Time `json:"executeAt"`

	// HTTP URL to call when the timer executes, returning 200 with CallbackResponse means success, otherwise will be retried.
	CallbackUrl string `json:"callbackUrl"`

	// Custom JSON payload to include in the callback
	Payload map[string]interface{} `json:"payload,omitempty"`

	RetryPolicy RetryPolicy `json:"retryPolicy,omitempty"`

	// Timeout for the HTTP callback in seconds
	CallbackTimeoutSeconds int32 `json:"callbackTimeoutSeconds,omitempty"`
}
