openapi: 3.0.3
info:
  contact:
    name: Timer Service Team
  description: "A distributed, durable timer service that can schedule and execute\
    \ HTTP webhook callbacks \nat specified times with high reliability and scalability.\n\
    \n## Features\n- Create one-time timers with custom payloads\n- Durable persistence\
    \ across service restarts\n- At-least-once delivery semantics\n- Configurable\
    \ retry policies and timeouts\n- Timer modification and cancellation\n- Callback\
    \ response can update timer schedule\n"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Distributed Durable Timer Service API
  version: 1.0.0
servers:
- description: Local development server
  url: http://localhost:8080/api/v1
- description: Production server
  url: https://timer-service.example.com/api/v1
paths:
  /timers:
    post:
      description: |
        Creates a new one-time timer that will execute an HTTP callback at the specified time.
        Timer IDs are used for deduplication - creating a timer with an existing ID will return the existing timer.
      operationId: createTimer
      requestBody:
        content:
          application/json:
            examples:
              simple_timer:
                summary: Simple timer example
                value:
                  id: user-notification-123
                  executeAt: 2024-12-20T15:30:00Z
                  callbackUrl: https://api.example.com/webhooks/timer
                  payload:
                    userId: user123
                    action: send_reminder
                    message: Don't forget about your meeting!
              complex_timer:
                summary: Timer with custom retry policy
                value:
                  id: payment-retry-456
                  groupId: xlarge-scale-group
                  executeAt: 2024-12-20T10:00:00Z
                  callbackUrl: https://payment.example.com/process
                  payload:
                    orderId: order-789
                    amount: 99.99
                    currency: USD
                  retryPolicy:
                    maxRetries: 3
                    backoffMultiplier: 2.0
                    initialInterval: 30s
                  callbackTimeout: 10s
            schema:
              $ref: "#/components/schemas/CreateTimerRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Timer"
          description: Timer created successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/AlreadyExists"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Create a new timer
  /timers/{groupId}/{timerId}:
    delete:
      description: |
        Cancel and delete a timer. Only pending timers can be deleted.
        Once deleted, the timer will not execute its callback.
      operationId: deleteTimer
      parameters:
      - description: Group identifier for the timer. It is used for scalability. Must
          be one of the groupIds enabled in the system. Must be provided in read/write
          operation requests for lookup.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          default: default
          example: xlarge-scale-group
          type: string
        style: simple
      - description: Unique identifier for the timer
        explode: false
        in: path
        name: timerId
        required: true
        schema:
          example: user-notification-123
          type: string
        style: simple
      responses:
        "204":
          description: Timer deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Delete a timer
    get:
      description: Query timer status and detailed information as specified in FR-1.5
      operationId: getTimer
      parameters:
      - description: Group identifier for the timer. It is used for scalability. Must
          be one of the groupIds enabled in the system. Must be provided in read/write
          operation requests for lookup.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          default: default
          example: xlarge-scale-group
          type: string
        style: simple
      - description: Unique identifier for the timer
        explode: false
        in: path
        name: timerId
        required: true
        schema:
          example: user-notification-123
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Timer"
          description: Timer details
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Get timer status and detailed information
    put:
      description: "Update a timer's execution time, callback URL, or payload. \n\
        Only pending timers can be updated.\n"
      operationId: updateTimer
      parameters:
      - description: Group identifier for the timer. It is used for scalability. Must
          be one of the groupIds enabled in the system. Must be provided in read/write
          operation requests for lookup.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          default: default
          example: xlarge-scale-group
          type: string
        style: simple
      - description: Unique identifier for the timer
        explode: false
        in: path
        name: timerId
        required: true
        schema:
          example: user-notification-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              update_time:
                summary: Update execution time
                value:
                  executeAt: 2024-12-21T15:30:00Z
              update_payload:
                summary: Update payload
                value:
                  payload:
                    userId: user456
                    action: send_reminder
                    message: Updated reminder message
            schema:
              $ref: "#/components/schemas/UpdateTimerRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Timer"
          description: Timer updated successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Update an existing timer
components:
  parameters:
    TimerId:
      description: Unique identifier for the timer
      explode: false
      in: path
      name: timerId
      required: true
      schema:
        example: user-notification-123
        type: string
      style: simple
    GroupId:
      description: Group identifier for the timer. It is used for scalability. Must
        be one of the groupIds enabled in the system. Must be provided in read/write
        operation requests for lookup.
      explode: false
      in: path
      name: groupId
      required: true
      schema:
        default: default
        example: xlarge-scale-group
        type: string
      style: simple
  responses:
    BadRequest:
      content:
        application/json:
          example:
            error: INVALID_INPUT
            message: executeAt must be a future timestamp
            timestamp: 2024-12-19T10:15:30Z
          schema:
            $ref: "#/components/schemas/Error"
      description: Bad request - invalid input parameters
    AlreadyExists:
      content:
        application/json:
          example:
            id: user-notification-123
            executeAt: 2024-12-20T15:30:00Z
            callbackUrl: https://api.example.com/webhooks/timer
            payload:
              userId: user123
              action: send_reminder
              message: Don't forget about your meeting!
          schema:
            $ref: "#/components/schemas/Timer"
      description: Timer already exists
    NotFound:
      content:
        application/json:
          example:
            error: TIMER_NOT_FOUND
            message: Timer with ID 'user-notification-123' not found
            timestamp: 2024-12-19T10:15:30Z
          schema:
            $ref: "#/components/schemas/Error"
      description: Timer not found
    InternalServerError:
      content:
        application/json:
          example:
            error: INTERNAL_ERROR
            message: An unexpected error occurred
            timestamp: 2024-12-19T10:15:30Z
          schema:
            $ref: "#/components/schemas/Error"
      description: Internal server error
  schemas:
    CreateTimerRequest:
      example:
        executeAt: 2024-12-20T15:30:00Z
        retryPolicy:
          backoffMultiplier: 2.0
          maxRetries: 3
          maxRetryAttemptsDuration: 1h
          initialInterval: 30s
          maxInterval: 5m
        callbackTimeout: 10s
        payload:
          userId: user123
          action: send_reminder
        groupId: xlarge-scale-group
        callbackUrl: https://api.example.com/webhooks/timer
        id: user-notification-123
      properties:
        id:
          description: Unique identifier for the timer (used for deduplication)
          example: user-notification-123
          maxLength: 255
          type: string
        groupId:
          default: default
          description: Group identifier for the timer. It is used for scalability.
            Must be one of the groupIds enabled in the system. Must be provided in
            read/write operation requests for lookup.
          example: xlarge-scale-group
          type: string
        executeAt:
          description: ISO 8601 timestamp when the timer should execute
          example: 2024-12-20T15:30:00Z
          format: date-time
          type: string
        callbackUrl:
          description: "HTTP URL to call when the timer executes, returning 200 with\
            \ CallbackResponse means success, otherwise will be retried."
          example: https://api.example.com/webhooks/timer
          format: uri
          maxLength: 2048
          type: string
        payload:
          description: Custom JSON payload to include in the callback
          example:
            userId: user123
            action: send_reminder
          type: object
        retryPolicy:
          $ref: "#/components/schemas/RetryPolicy"
        callbackTimeout:
          default: 30s
          description: "Timeout for the HTTP callback (e.g., \"30s\", \"5m\")"
          example: 10s
          type: string
      required:
      - callbackUrl
      - executeAt
      - id
      type: object
    CallbackResponse:
      properties:
        ok:
          description: "Whether the callback is successful. If false, the timer will\
            \ be retried (same as not returning 200)."
          type: boolean
        nextExecuteAt:
          description: ISO 8601 timestamp when the timer should execute next time.
            Only valid when ok is false.
          example: 2024-12-20T15:30:00Z
          format: date-time
          type: string
      required:
      - ok
      type: object
    UpdateTimerRequest:
      example:
        executeAt: 2024-12-21T15:30:00Z
        retryPolicy:
          backoffMultiplier: 2.0
          maxRetries: 3
          maxRetryAttemptsDuration: 1h
          initialInterval: 30s
          maxInterval: 5m
        callbackTimeout: 15s
        payload: "{}"
        callbackUrl: https://api.example.com/webhooks/timer-updated
      properties:
        executeAt:
          description: New execution time for the timer
          example: 2024-12-21T15:30:00Z
          format: date-time
          type: string
        callbackUrl:
          description: "New callback URL, returning 200 with CallbackResponse means\
            \ success, otherwise will be retried."
          example: https://api.example.com/webhooks/timer-updated
          format: uri
          maxLength: 2048
          type: string
        payload:
          description: New payload data
          type: object
        retryPolicy:
          $ref: "#/components/schemas/RetryPolicy"
        callbackTimeout:
          description: New timeout for the HTTP callback
          example: 15s
          type: string
      type: object
    Timer:
      example:
        executeAt: 2024-12-20T15:30:00Z
        createdAt: 2024-12-19T10:00:00Z
        retryPolicy:
          backoffMultiplier: 2.0
          maxRetries: 3
          maxRetryAttemptsDuration: 1h
          initialInterval: 30s
          maxInterval: 5m
        callbackTimeout: 30s
        executedAt: 2024-12-20T15:30:05Z
        payload:
          userId: user123
          action: send_reminder
        groupId: xlarge-scale-group
        callbackUrl: https://api.example.com/webhooks/timer
        id: user-notification-123
        updatedAt: 2024-12-19T10:00:00Z
      properties:
        id:
          description: Unique identifier for the timer
          example: user-notification-123
          type: string
        groupId:
          description: Group identifier for the timer. It is used for scalability.
            Must be one of the groupIds enabled in the system. Must be provided in
            read/write operation requests for lookup.
          example: xlarge-scale-group
          type: string
        executeAt:
          description: When the timer is scheduled to execute
          example: 2024-12-20T15:30:00Z
          format: date-time
          type: string
        callbackUrl:
          description: "HTTP URL to call when executing, returning 200 with CallbackResponse\
            \ means success, otherwise will be retried."
          example: https://api.example.com/webhooks/timer
          format: uri
          type: string
        payload:
          description: Custom payload data
          example:
            userId: user123
            action: send_reminder
          type: object
        retryPolicy:
          $ref: "#/components/schemas/RetryPolicy"
        callbackTimeout:
          description: Timeout for the HTTP callback
          example: 30s
          type: string
        createdAt:
          description: When the timer was created
          example: 2024-12-19T10:00:00Z
          format: date-time
          type: string
        updatedAt:
          description: When the timer was last updated
          example: 2024-12-19T10:00:00Z
          format: date-time
          type: string
        executedAt:
          description: When the timer was executed (if applicable)
          example: 2024-12-20T15:30:05Z
          format: date-time
          type: string
      required:
      - callbackUrl
      - createdAt
      - executeAt
      - groupId
      - id
      - updatedAt
      type: object
    RetryPolicy:
      example:
        backoffMultiplier: 2.0
        maxRetries: 3
        maxRetryAttemptsDuration: 1h
        initialInterval: 30s
        maxInterval: 5m
      properties:
        maxRetries:
          default: 3
          description: Maximum number of retry attempts
          example: 3
          maximum: 10
          minimum: 0
          type: integer
        maxRetryAttemptsDuration:
          default: 24h
          description: the total duration of retry attempts
          example: 1h
          type: string
        initialInterval:
          default: 30s
          description: "Initial retry interval (e.g., \"30s\", \"1m\")"
          example: 30s
          type: string
        backoffMultiplier:
          default: 2.0
          description: Multiplier for exponential backoff
          example: 2.0
          maximum: 10.0
          minimum: 1.0
          type: number
        maxInterval:
          default: 10m
          description: Maximum retry interval
          example: 5m
          type: string
      type: object
    Error:
      example:
        details: "{}"
        error: TIMER_NOT_FOUND
        message: Timer with ID 'user-notification-123' not found
        timestamp: 2024-12-19T10:15:30Z
      properties:
        error:
          description: Error code
          example: TIMER_NOT_FOUND
          type: string
        message:
          description: Human-readable error message
          example: Timer with ID 'user-notification-123' not found
          type: string
        details:
          description: Additional error details
          type: object
        timestamp:
          description: When the error occurred
          example: 2024-12-19T10:15:30Z
          format: date-time
          type: string
      required:
      - error
      - message
      type: object
