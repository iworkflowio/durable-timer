version: '3.8'

services:
  mongodb:
    image: mongo:7
    container_name: timer-service-mongodb-dev
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - timer-network
    command: ["mongod", "--replSet", "timer-rs", "--bind_ip_all", "--noauth"]
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand('ping').ok"]
      timeout: 20s
      retries: 15
      interval: 10s
      start_period: 60s

  mongodb-replica-init:
    image: mongo:7
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - timer-network
    entrypoint: >
      sh -c "
        echo 'Waiting for MongoDB to be ready...' &&
        until mongosh --host mongodb --eval 'db.runCommand({ping:1})' --quiet; do
          echo 'MongoDB not ready, waiting...'
          sleep 2
        done &&
        echo 'Initializing replica set...' &&
        mongosh --host mongodb --eval '
          try {
            rs.initiate({
              _id: \"timer-rs\",
              members: [
                { _id: 0, host: \"mongodb:27017\" }
              ]
            });
            print(\"Replica set initialized successfully\");
          } catch (e) {
            if (e.code === 23 || e.message.includes(\"already initialized\")) {
              print(\"Replica set already initialized\");
            } else {
              print(\"Error initializing replica set:\", e);
              throw e;
            }
          }
        ' &&
        echo 'Waiting for replica set to become ready...' &&
        until mongosh --host mongodb --eval 'rs.status().ok' --quiet; do
          echo 'Replica set not ready, waiting...'
          sleep 2
        done &&
        echo 'MongoDB replica set setup completed successfully!'
      "

  mongodb-init:
    image: mongo:7
    depends_on:
      mongodb-replica-init:
        condition: service_completed_successfully
    volumes:
      - ../server/databases/mongodb/schema:/schema
    networks:
      - timer-network
    entrypoint: >
      sh -c "
        echo 'Waiting for MongoDB to be ready...' &&
        until mongosh --host mongodb --eval 'db.runCommand({ping:1}).ok' --quiet; do
          echo 'MongoDB not ready, waiting...'
          sleep 2
        done &&
        echo 'Creating timer_service database and user...' &&
        mongosh --host mongodb --eval '
          use timer_service;
          db.createUser({
            user: \"timer_user\",
            pwd: \"timer_password\", 
            roles: [{role: \"readWrite\", db: \"timer_service\"}]
          });
          print(\"User timer_user created successfully\");
        ' &&
        echo 'Executing schema from v1.js...' &&
        mongosh --host mongodb timer_service < /schema/v1.js &&
        echo 'Schema execution completed successfully!'
      "

volumes:
  mongodb_data:

networks:
  timer-network:
    driver: bridge